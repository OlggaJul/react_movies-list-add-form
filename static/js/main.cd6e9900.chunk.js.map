{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","required","onChange","validationRequired","useState","Math","random","toString","slice","id","touched","setToched","isValid","setIsValid","hasError","htmlFor","classNames","type","placeholder","event","target","onBlur","link","test","NewMovie","memo","onAdd","count","setCount","setTitle","setDescription","setImgUrl","setImdbUrl","setImdbId","newMovie","getFormValidation","str","isFormValid","onSubmit","preventDefault","disabled","App","moviesFromServer","allMovies","setAllMovies","useCallback","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cd6e9900.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n  validationRequired?: boolean,\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  required = false,\n  onChange = () => { },\n  validationRequired = false,\n}) => {\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n  const [touched, setToched] = useState(false);\n  const [isValid, setIsValid] = useState(true);\n\n  const hasError = touched && required && !value;\n\n  const handleFocusChange = (link: string): void => {\n    setToched(true);\n    if (validationRequired) {\n      // eslint-disable-next-line max-len\n      const pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n\n      setIsValid(pattern.test(link));\n    }\n  };\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={() => handleFocusChange(value)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n\n      {!isValid && (\n        <p className=\"help is-danger\">{`${label} is unvalid`}</p>\n      )}\n    </div>\n  );\n};\n","import React, { memo, useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  onAdd: (movie: Movie) => void;\n};\nexport const NewMovie: React.FC<Props> = memo(({\n  onAdd,\n}) => {\n  const [count, setCount] = useState(0);\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [imgUrl, setImgUrl] = useState('');\n  const [imdbUrl, setImdbUrl] = useState('');\n  const [imdbId, setImdbId] = useState('');\n\n  const newMovie = {\n    title,\n    description,\n    imgUrl,\n    imdbUrl,\n    imdbId,\n  };\n\n  const getFormValidation = (str: string): boolean => {\n    // eslint-disable-next-line max-len\n    const pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n\n    return pattern.test(str);\n  };\n\n  const shouldFormSubmit = () => {\n    return title\n      && getFormValidation(imgUrl)\n      && getFormValidation(imdbUrl)\n      && imgUrl\n      && imdbUrl\n      && imdbId;\n  };\n\n  const isFormValid = shouldFormSubmit();\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (isFormValid) {\n      onAdd(newMovie);\n      setTitle(() => '');\n      setDescription(() => '');\n      setImgUrl(() => '');\n      setImdbUrl(() => '');\n      setImdbId(() => '');\n      setCount(count + 1);\n    }\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={handleSubmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChange={setTitle}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={setDescription}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrl}\n        onChange={setImgUrl}\n        required\n        validationRequired\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl}\n        onChange={setImdbUrl}\n        required\n        validationRequired\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        onChange={setImdbId}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={!isFormValid}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n});\n","import './App.scss';\nimport { useCallback, useState } from 'react';\nimport { Movie } from './types/Movie';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport const App = () => {\n  const [allMovies, setAllMovies] = useState(moviesFromServer);\n\n  const onAdd = useCallback((movie: Movie) => {\n    setAllMovies(() => [...allMovies, movie]);\n  }, []);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={allMovies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={onAdd} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}